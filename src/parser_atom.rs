#[allow(dead_code)]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub enum JSParserAtom {
    JsParserAtom_null,
    JsParserAtom_false,
    JsParserAtom_true,
    JsParserAtom_if,
    JsParserAtom_else,
    JsParserAtom_return,
    JsParserAtom_var,
    JsParserAtom_this,
    JsParserAtom_delete,
    JsParserAtom_void,
    JsParserAtom_typeof,
    JsParserAtom_new,
    JsParserAtom_in,
    JsParserAtom_instanceof,
    JsParserAtom_do,
    JsParserAtom_while,
    JsParserAtom_for,
    JsParserAtom_break,
    JsParserAtom_continue,
    JsParserAtom_switch,
    JsParserAtom_case,
    JsParserAtom_default,
    JsParserAtom_throw,
    JsParserAtom_try,
    JsParserAtom_catch,
    JsParserAtom_finally,
    JsParserAtom_function,
    JsParserAtom_debugger,
    JsParserAtom_with,
    /* FutureReservedWord */
    JsParserAtom_class,
    JsParserAtom_const,
    JsParserAtom_enum,
    JsParserAtom_export,
    JsParserAtom_extends,
    JsParserAtom_import,
    JsParserAtom_super,
    /* FutureReservedWords when parsing strict mode code */
    JsParserAtom_implements,
    JsParserAtom_interface,
    JsParserAtom_let,
    JsParserAtom_package,
    JsParserAtom_private,
    JsParserAtom_protected,
    JsParserAtom_public,
    JsParserAtom_static,
    JsParserAtom_yield,
    JsParserAtom_await,

    /* empty string */
    JsParserAtom_empty_string,
    /* identifiers */
    JsParserAtom_length,
    JsParserAtom_fileName,
    JsParserAtom_lineNumber,
    JsParserAtom_message,
    JsParserAtom_errors,
    JsParserAtom_stack,
    JsParserAtom_name,
    JsParserAtom_toString,
    JsParserAtom_toLocaleString,
    JsParserAtom_valueOf,
    JsParserAtom_eval,
    JsParserAtom_prototype,
    JsParserAtom_constructor,
    JsParserAtom_configurable,
    JsParserAtom_writable,
    JsParserAtom_enumerable,
    JsParserAtom_value,
    JsParserAtom_get,
    JsParserAtom_set,
    JsParserAtom_of,
    JsParserAtom___proto__,
    JsParserAtom_undefined,
    JsParserAtom_number,
    JsParserAtom_boolean,
    JsParserAtom_string,
    JsParserAtom_object,
    JsParserAtom_symbol,
    JsParserAtom_integer,
    JsParserAtom_unknown,
    JsParserAtom_arguments,
    JsParserAtom_callee,
    JsParserAtom_caller,
    JsParserAtom__eval_,
    JsParserAtom__ret_,
    JsParserAtom__var_,
    JsParserAtom__with_,
    JsParserAtom_lastIndex,
    JsParserAtom_target,
    JsParserAtom_index,
    JsParserAtom_input,
    JsParserAtom_defineProperties,
    JsParserAtom_apply,
    JsParserAtom_join,
    JsParserAtom_concat,
    JsParserAtom_split,
    JsParserAtom_construct,
    JsParserAtom_getPrototypeOf,
    JsParserAtom_setPrototypeOf,
    JsParserAtom_isExtensible,
    JsParserAtom_preventExtensions,
    JsParserAtom_has,
    JsParserAtom_deleteProperty,
    JsParserAtom_defineProperty,
    JsParserAtom_getOwnPropertyDescriptor,
    JsParserAtom_ownKeys,
    JsParserAtom_add,
    JsParserAtom_done,
    JsParserAtom_next,
    JsParserAtom_values,
    JsParserAtom_source,
    JsParserAtom_flags,
    JsParserAtom_global,
    JsParserAtom_unicode,
    JsParserAtom_raw,
    JsParserAtom_new_target,
    JsParserAtom_this_active_func,
    JsParserAtom_home_object,
    JsParserAtom_computed_field,
    JsParserAtom_static_computed_field,
    JsParserAtom_class_fields_init,
    JsParserAtom_brand,
    JsParserAtom_hash_constructor,
    JsParserAtom_as,
    JsParserAtom_from,
    JsParserAtom_meta,
    JsParserAtom__default_,
    JsParserAtom__star_,
    JsParserAtom_Module,
    JsParserAtom_then,
    JsParserAtom_resolve,
    JsParserAtom_reject,
    JsParserAtom_promise,
    JsParserAtom_proxy,
    JsParserAtom_revoke,
    JsParserAtom_async,
    JsParserAtom_exec,
    JsParserAtom_groups,
    JsParserAtom_status,
    JsParserAtom_reason,
    JsParserAtom_globalThis,
    //  #ifdef CONFIG_BIGNUM
    //  JsParserAtom_bigint,
    //  JsParserAtom_bigfloat,
    //  JsParserAtom_bigdecimal,
    //  JsParserAtom_roundingMode,
    //  JsParserAtom_maximumSignificantDigits,
    //  JsParserAtom_maximumFractionDigits,
    //  #endif
    //  #ifdef CONFIG_ATOMICS
    //  JsParserAtom_not_equal,
    //  JsParserAtom_timed_out,
    //  JsParserAtom_ok,
    //  #endif
    JsParserAtom_toJSON,
    /* class names */
    JsParserAtom_Object,
    JsParserAtom_Array,
    JsParserAtom_Error,
    JsParserAtom_Number,
    JsParserAtom_String,
    JsParserAtom_Boolean,
    JsParserAtom_Symbol,
    JsParserAtom_Arguments,
    JsParserAtom_Math,
    JsParserAtom_JSON,
    JsParserAtom_Date,
    JsParserAtom_Function,
    JsParserAtom_GeneratorFunction,
    JsParserAtom_ForInIterator,
    JsParserAtom_RegExp,
    JsParserAtom_ArrayBuffer,
    JsParserAtom_SharedArrayBuffer,
    /* must keep same order as class IDs for typed arrays */
    JsParserAtom_Uint8ClampedArray,
    JsParserAtom_Int8Array,
    JsParserAtom_Uint8Array,
    JsParserAtom_Int16Array,
    JsParserAtom_Uint16Array,
    JsParserAtom_Int32Array,
    JsParserAtom_Uint32Array,
    //  #ifdef CONFIG_BIGNUM
    //  JsParserAtom_BigInt64Array,
    //  JsParserAtom_BigUint64Array,
    //  #endif
    JsParserAtom_Float32Array,
    JsParserAtom_Float64Array,
    JsParserAtom_DataView,
    //  #ifdef CONFIG_BIGNUM
    //  JsParserAtom_BigInt,
    //  JsParserAtom_BigFloat,
    //  JsParserAtom_BigFloatEnv,
    //  JsParserAtom_BigDecimal,
    //  JsParserAtom_OperatorSet,
    //  JsParserAtom_Operators,
    //  #endif
    JsParserAtom_Map,
    JsParserAtom_Set,
    JsParserAtom_WeakMap,
    JsParserAtom_WeakSet,
    JsParserAtom_Map_Iterator,
    JsParserAtom_Set_Iterator,
    JsParserAtom_Array_Iterator,
    JsParserAtom_String_Iterator,
    JsParserAtom_RegExp_String_Iterator,
    JsParserAtom_Generator,
    JsParserAtom_Proxy,
    JsParserAtom_Promise,
    JsParserAtom_PromiseResolveFunction,
    JsParserAtom_PromiseRejectFunction,
    JsParserAtom_AsyncFunction,
    JsParserAtom_AsyncFunctionResolve,
    JsParserAtom_AsyncFunctionReject,
    JsParserAtom_AsyncGeneratorFunction,
    JsParserAtom_AsyncGenerator,
    JsParserAtom_EvalError,
    JsParserAtom_RangeError,
    JsParserAtom_ReferenceError,
    JsParserAtom_SyntaxError,
    JsParserAtom_TypeError,
    JsParserAtom_URIError,
    JsParserAtom_InternalError,
    /* private symbols */
    JsParserAtom_Private_brand,
    /* symbols */
    JsParserAtom_Symbol_toPrimitive,
    JsParserAtom_Symbol_iterator,
    JsParserAtom_Symbol_match,
    JsParserAtom_Symbol_matchAll,
    JsParserAtom_Symbol_replace,
    JsParserAtom_Symbol_search,
    JsParserAtom_Symbol_split,
    JsParserAtom_Symbol_toStringTag,
    JsParserAtom_Symbol_isConcatSpreadable,
    JsParserAtom_Symbol_hasInstance,
    JsParserAtom_Symbol_species,
    JsParserAtom_Symbol_unscopables,
    JsParserAtom_Symbol_asyncIterator,
}
impl std::fmt::Display for JSParserAtom {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        // use JSParserAtom::*;
        match self {
            JSParserAtom_null => write!(f, "null"),
            JSParserAtom_false => write!(f, "false"),
            JSParserAtom_true => write!(f, "true"),
            JSParserAtom_if => write!(f, "if"),
            JSParserAtom_else => write!(f, "else"),
            JSParserAtom_return => write!(f, "return"),
            JSParserAtom_var => write!(f, "var"),
            JSParserAtom_this => write!(f, "this"),
            JSParserAtom_delete => write!(f, "delete"),
            JSParserAtom_void => write!(f, "void"),
            JSParserAtom_typeof => write!(f, "typeof"),
            JSParserAtom_new => write!(f, "new"),
            JSParserAtom_in => write!(f, "in"),
            JSParserAtom_instanceof => write!(f, "instanceof"),
            JSParserAtom_do => write!(f, "do"),
            JSParserAtom_while => write!(f, "while"),
            JSParserAtom_for => write!(f, "for"),
            JSParserAtom_break => write!(f, "break"),
            JSParserAtom_continue => write!(f, "continue"),
            JSParserAtom_switch => write!(f, "switch"),
            JSParserAtom_case => write!(f, "case"),
            JSParserAtom_default => write!(f, "default"),
            JSParserAtom_throw => write!(f, "throw"),
            JSParserAtom_try => write!(f, "try"),
            JSParserAtom_catch => write!(f, "catch"),
            JSParserAtom_finally => write!(f, "finally"),
            JSParserAtom_function => write!(f, "function"),
            JSParserAtom_debugger => write!(f, "debugger"),
            JSParserAtom_with => write!(f, "with"),
            /* FutureReservedWord */
            JSParserAtom_class => write!(f, "class"),
            JSParserAtom_const => write!(f, "const"),
            JSParserAtom_enum => write!(f, "enum"),
            JSParserAtom_export => write!(f, "export"),
            JSParserAtom_extends => write!(f, "extends"),
            JSParserAtom_import => write!(f, "import"),
            JSParserAtom_super => write!(f, "super"),
            /* FutureReservedWords when parsing strict mode code */
            JSParserAtom_implements => write!(f, "implements"),
            JSParserAtom_interface => write!(f, "interface"),
            JSParserAtom_let => write!(f, "let"),
            JSParserAtom_package => write!(f, "package"),
            JSParserAtom_private => write!(f, "private"),
            JSParserAtom_protected => write!(f, "protected"),
            JSParserAtom_public => write!(f, "public"),
            JSParserAtom_static => write!(f, "static"),
            JSParserAtom_yield => write!(f, "yield"),
            JSParserAtom_await => write!(f, "await"),

            /* empty string */
            JSParserAtom_empty_string => write!(f, ""),
            /* identifiers */
            JSParserAtom_length => write!(f, "length"),
            JSParserAtom_fileName => write!(f, "fileName"),
            JSParserAtom_lineNumber => write!(f, "lineNumber"),
            JSParserAtom_message => write!(f, "message"),
            JSParserAtom_errors => write!(f, "errors"),
            JSParserAtom_stack => write!(f, "stack"),
            JSParserAtom_name => write!(f, "name"),
            JSParserAtom_toString => write!(f, "toString"),
            JSParserAtom_toLocaleString => write!(f, "toLocaleString"),
            JSParserAtom_valueOf => write!(f, "valueOf"),
            JSParserAtom_eval => write!(f, "eval"),
            JSParserAtom_prototype => write!(f, "prototype"),
            JSParserAtom_constructor => write!(f, "constructor"),
            JSParserAtom_configurable => write!(f, "configurable"),
            JSParserAtom_writable => write!(f, "writable"),
            JSParserAtom_enumerable => write!(f, "enumerable"),
            JSParserAtom_value => write!(f, "value"),
            JSParserAtom_get => write!(f, "get"),
            JSParserAtom_set => write!(f, "set"),
            JSParserAtom_of => write!(f, "of"),
            JSParserAtom___proto__ => write!(f, "__proto__"),
            JSParserAtom_undefined => write!(f, "undefined"),
            JSParserAtom_number => write!(f, "number"),
            JSParserAtom_boolean => write!(f, "boolean"),
            JSParserAtom_string => write!(f, "string"),
            JSParserAtom_object => write!(f, "object"),
            JSParserAtom_symbol => write!(f, "symbol"),
            JSParserAtom_integer => write!(f, "integer"),
            JSParserAtom_unknown => write!(f, "unknown"),
            JSParserAtom_arguments => write!(f, "arguments"),
            JSParserAtom_callee => write!(f, "callee"),
            JSParserAtom_caller => write!(f, "caller"),
            JSParserAtom__eval_ => write!(f, "<eval>"),
            JSParserAtom__ret_ => write!(f, "<ret>"),
            JSParserAtom__var_ => write!(f, "<var>"),
            JSParserAtom__with_ => write!(f, "<with>"),
            JSParserAtom_lastIndex => write!(f, "lastIndex"),
            JSParserAtom_target => write!(f, "target"),
            JSParserAtom_index => write!(f, "index"),
            JSParserAtom_input => write!(f, "input"),
            JSParserAtom_defineProperties => write!(f, "defineProperties"),
            JSParserAtom_apply => write!(f, "apply"),
            JSParserAtom_join => write!(f, "join"),
            JSParserAtom_concat => write!(f, "concat"),
            JSParserAtom_split => write!(f, "split"),
            JSParserAtom_construct => write!(f, "construct"),
            JSParserAtom_getPrototypeOf => write!(f, "getPrototypeOf"),
            JSParserAtom_setPrototypeOf => write!(f, "setPrototypeOf"),
            JSParserAtom_isExtensible => write!(f, "isExtensible"),
            JSParserAtom_preventExtensions => write!(f, "preventExtensions"),
            JSParserAtom_has => write!(f, "has"),
            JSParserAtom_deleteProperty => write!(f, "deleteProperty"),
            JSParserAtom_defineProperty => write!(f, "defineProperty"),
            JSParserAtom_getOwnPropertyDescriptor => write!(f, "getOwnPropertyDescriptor"),
            JSParserAtom_ownKeys => write!(f, "ownKeys"),
            JSParserAtom_add => write!(f, "add"),
            JSParserAtom_done => write!(f, "done"),
            JSParserAtom_next => write!(f, "next"),
            JSParserAtom_values => write!(f, "values"),
            JSParserAtom_source => write!(f, "source"),
            JSParserAtom_flags => write!(f, "flags"),
            JSParserAtom_global => write!(f, "global"),
            JSParserAtom_unicode => write!(f, "unicode"),
            JSParserAtom_raw => write!(f, "raw"),
            JSParserAtom_new_target => write!(f, "new.target"),
            JSParserAtom_this_active_func => write!(f, "this.active_func"),
            JSParserAtom_home_object => write!(f, "<home_object>"),
            JSParserAtom_computed_field => write!(f, "<computed_field>"),
            /* must come after computed_fields */
            JSParserAtom_static_computed_field => write!(f, "<static_computed_field>"),
            JSParserAtom_class_fields_init => write!(f, "<class_fields_init>"),
            JSParserAtom_brand => write!(f, "<brand>"),
            JSParserAtom_hash_constructor => write!(f, "#constructor"),
            JSParserAtom_as => write!(f, "as"),
            JSParserAtom_from => write!(f, "from"),
            JSParserAtom_meta => write!(f, "meta"),
            JSParserAtom__default_ => write!(f, "*default*"),
            JSParserAtom__star_ => write!(f, "*"),
            JSParserAtom_Module => write!(f, "Module"),
            JSParserAtom_then => write!(f, "then"),
            JSParserAtom_resolve => write!(f, "resolve"),
            JSParserAtom_reject => write!(f, "reject"),
            JSParserAtom_promise => write!(f, "promise"),
            JSParserAtom_proxy => write!(f, "proxy"),
            JSParserAtom_revoke => write!(f, "revoke"),
            JSParserAtom_async => write!(f, "async"),
            JSParserAtom_exec => write!(f, "exec"),
            JSParserAtom_groups => write!(f, "groups"),
            JSParserAtom_status => write!(f, "status"),
            JSParserAtom_reason => write!(f, "reason"),
            JSParserAtom_globalThis => write!(f, "globalThis"),
            // #ifdef CONFIG_BIGNUM
            // JSParserAtom_bigint => write!(f,"bigint"),
            // JSParserAtom_bigfloat => write!(f,"bigfloat"),
            // JSParserAtom_bigdecimal => write!(f,"bigdecimal"),
            // JSParserAtom_roundingMode => write!(f,"roundingMode"),
            // JSParserAtom_maximumSignificantDigits => write!(f,"maximumSignificantDigits"),
            // JSParserAtom_maximumFractionDigits => write!(f,"maximumFractionDigits"),
            // #endif
            // #ifdef CONFIG_ATOMICS
            // JSParserAtom_not_equal => write!(f,"not-equal"),
            // JSParserAtom_timed_out => write!(f,"timed-out"),
            // JSParserAtom_ok => write!(f,"ok"),
            // #endif
            JSParserAtom_toJSON => write!(f, "toJSON"),
            /* class names */
            JSParserAtom_Object => write!(f, "Object"),
            JSParserAtom_Array => write!(f, "Array"),
            JSParserAtom_Error => write!(f, "Error"),
            JSParserAtom_Number => write!(f, "Number"),
            JSParserAtom_String => write!(f, "String"),
            JSParserAtom_Boolean => write!(f, "Boolean"),
            JSParserAtom_Symbol => write!(f, "Symbol"),
            JSParserAtom_Arguments => write!(f, "Arguments"),
            JSParserAtom_Math => write!(f, "Math"),
            JSParserAtom_JSON => write!(f, "JSON"),
            JSParserAtom_Date => write!(f, "Date"),
            JSParserAtom_Function => write!(f, "Function"),
            JSParserAtom_GeneratorFunction => write!(f, "GeneratorFunction"),
            JSParserAtom_ForInIterator => write!(f, "ForInIterator"),
            JSParserAtom_RegExp => write!(f, "RegExp"),
            JSParserAtom_ArrayBuffer => write!(f, "ArrayBuffer"),
            JSParserAtom_SharedArrayBuffer => write!(f, "SharedArrayBuffer"),
            /* must keep same order as class IDs for typed arrays */
            JSParserAtom_Uint8ClampedArray => write!(f, "Uint8ClampedArray"),
            JSParserAtom_Int8Array => write!(f, "Int8Array"),
            JSParserAtom_Uint8Array => write!(f, "Uint8Array"),
            JSParserAtom_Int16Array => write!(f, "Int16Array"),
            JSParserAtom_Uint16Array => write!(f, "Uint16Array"),
            JSParserAtom_Int32Array => write!(f, "Int32Array"),
            JSParserAtom_Uint32Array => write!(f, "Uint32Array"),
            // #ifdef CONFIG_BIGNUM
            // JSParserAtom_BigInt64Array => write!(f,"BigInt64Array"),
            // JSParserAtom_BigUint64Array => write!(f,"BigUint64Array"),
            // #endif
            JSParserAtom_Float32Array => write!(f, "Float32Array"),
            JSParserAtom_Float64Array => write!(f, "Float64Array"),
            JSParserAtom_DataView => write!(f, "DataView"),
            // #ifdef CONFIG_BIGNUM
            // JSParserAtom_BigInt => write!(f,"BigInt"),
            // JSParserAtom_BigFloat => write!(f,"BigFloat"),
            // JSParserAtom_BigFloatEnv => write!(f,"BigFloatEnv"),
            // JSParserAtom_BigDecimal => write!(f,"BigDecimal"),
            // JSParserAtom_OperatorSet => write!(f,"OperatorSet"),
            // JSParserAtom_Operators => write!(f,"Operators"),
            // #endif
            JSParserAtom_Map => write!(f, "Map"),
            /* Map + 1 */
            JSParserAtom_Set => write!(f, "Set"),
            /* Map + 2 */
            JSParserAtom_WeakMap => write!(f, "WeakMap"),
            /* Map + 3 */
            JSParserAtom_WeakSet => write!(f, "WeakSet"),
            JSParserAtom_Map_Iterator => write!(f, "Map Iterator"),
            JSParserAtom_Set_Iterator => write!(f, "Set Iterator"),
            JSParserAtom_Array_Iterator => write!(f, "Array Iterator"),
            JSParserAtom_String_Iterator => write!(f, "String Iterator"),
            JSParserAtom_RegExp_String_Iterator => write!(f, "RegExp String Iterator"),
            JSParserAtom_Generator => write!(f, "Generator"),
            JSParserAtom_Proxy => write!(f, "Proxy"),
            JSParserAtom_Promise => write!(f, "Promise"),
            JSParserAtom_PromiseResolveFunction => write!(f, "PromiseResolveFunction"),
            JSParserAtom_PromiseRejectFunction => write!(f, "PromiseRejectFunction"),
            JSParserAtom_AsyncFunction => write!(f, "AsyncFunction"),
            JSParserAtom_AsyncFunctionResolve => write!(f, "AsyncFunctionResolve"),
            JSParserAtom_AsyncFunctionReject => write!(f, "AsyncFunctionReject"),
            JSParserAtom_AsyncGeneratorFunction => write!(f, "AsyncGeneratorFunction"),
            JSParserAtom_AsyncGenerator => write!(f, "AsyncGenerator"),
            JSParserAtom_EvalError => write!(f, "EvalError"),
            JSParserAtom_RangeError => write!(f, "RangeError"),
            JSParserAtom_ReferenceError => write!(f, "ReferenceError"),
            JSParserAtom_SyntaxError => write!(f, "SyntaxError"),
            JSParserAtom_TypeError => write!(f, "TypeError"),
            JSParserAtom_URIError => write!(f, "URIError"),
            JSParserAtom_InternalError => write!(f, "InternalError"),
            /* private symbols */
            JSParserAtom_Private_brand => write!(f, "<brand>"),
            /* symbols */
            JSParserAtom_Symbol_toPrimitive => write!(f, "Symbol.toPrimitive"),
            JSParserAtom_Symbol_iterator => write!(f, "Symbol.iterator"),
            JSParserAtom_Symbol_match => write!(f, "Symbol.match"),
            JSParserAtom_Symbol_matchAll => write!(f, "Symbol.matchAll"),
            JSParserAtom_Symbol_replace => write!(f, "Symbol.replace"),
            JSParserAtom_Symbol_search => write!(f, "Symbol.search"),
            JSParserAtom_Symbol_split => write!(f, "Symbol.split"),
            JSParserAtom_Symbol_toStringTag => write!(f, "Symbol.toStringTag"),
            JSParserAtom_Symbol_isConcatSpreadable => write!(f, "Symbol.isConcatSpreadable"),
            JSParserAtom_Symbol_hasInstance => write!(f, "Symbol.hasInstance"),
            JSParserAtom_Symbol_species => write!(f, "Symbol.species"),
            JSParserAtom_Symbol_unscopables => write!(f, "Symbol.unscopables"),
            JSParserAtom_Symbol_asyncIterator => write!(f, "Symbol.asyncIterator"),
        }
    }
}


mod test{
    #[test]
    fn test_js_parser_atom_to_string(){
        use crate::parser_atom::JSParserAtom;
        let atom = JSParserAtom::JsParserAtom_null;
        assert!(atom.to_string() == "null");
    }
}